// Generated by BeanMaker, on April 1, 2018 4:35:29 AM CEST
// Library Version #0.9.12-beta

package org.dbbeans.scheduler;

import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.text.DateFormat;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import org.beanmaker.util.BeanInternals;
import org.beanmaker.util.DBQueries;
import org.beanmaker.util.DbBeanInterface;
import org.beanmaker.util.ErrorMessage;
import org.beanmaker.util.FormatCheckHelper;
import org.beanmaker.util.IdNamePair;
import org.beanmaker.util.ToStringMaker;

import org.dbbeans.sql.DBQueryRetrieveData;
import org.dbbeans.sql.DBQuerySetup;
import org.dbbeans.sql.DBQuerySetupProcess;
import org.dbbeans.sql.DBTransaction;

import org.dbbeans.sql.queries.BooleanCheckQuery;

import org.dbbeans.util.Dates;
import org.dbbeans.util.SimpleInputDateFormat;
import org.dbbeans.util.Strings;

public abstract class WeeklyBase extends DbBean implements DbBeanInterface {
	private long id;
	private long idRegistryEntry;
	private int everyXWeek;
	private String everyXWeekStr = "";
	private Date start;
	private String startStr = "";
	private long idEnding;

	protected static final String DATABASE_TABLE_NAME = "schdlr_weekly";
	protected static final String DATABASE_FIELD_LIST = "schdlr_weekly.id, schdlr_weekly.id_registry_entry, schdlr_weekly.every_x_week, schdlr_weekly.start, schdlr_weekly.id_ending";

	protected final BeanInternals weeklyInternals = new BeanInternals("org-dbbeans-scheduler-Weekly");
	protected static final WeeklyParameters WEEKLY_PARAMETERS = new WeeklyParameters();

	public WeeklyBase() { }

	public WeeklyBase(final long id) {
		setId(id);
	}

	public WeeklyBase(final WeeklyBase weeklyModel) {
		id = 0;
		idRegistryEntry = weeklyModel.idRegistryEntry;
		setEveryXWeek(weeklyModel.everyXWeek);
		setStart(weeklyModel.start);
		idEnding = weeklyModel.idEnding;
	}

	protected WeeklyBase(final long id, final long idRegistryEntry, final int everyXWeek, final Date start, final long idEnding) {
		this.id = id;
		this.idRegistryEntry = idRegistryEntry;
		setEveryXWeek(everyXWeek);
		setStart(start);
		this.idEnding = idEnding;
	}

	protected WeeklyBase(final ResultSet rs) throws SQLException {
		this(rs.getLong(1), rs.getLong(2), rs.getInt(3), rs.getDate(4), rs.getLong(5));
	}

	@Override
	public void setId(final long id) {
		class DataFromDBQuery implements DBQuerySetupProcess {
			long idRegistryEntry = 0;
			int everyXWeek = 0;
			Date start = null;
			long idEnding = 0;
			boolean idOK = false;

			@Override
			public void setupPreparedStatement(final PreparedStatement stat) throws SQLException {
				stat.setLong(1, id);
			}

			@Override
			public void processResultSet(final ResultSet rs) throws SQLException {
				if (rs.next()) {
					idRegistryEntry = rs.getLong(1);
					everyXWeek = rs.getInt(2);
					start = rs.getDate(3);
					idEnding = rs.getLong(4);
					idOK = true;
				}
			}
		}

		if (id <= 0)
			throw new IllegalArgumentException("id = " + id + " <= 0");

		final DataFromDBQuery dataFromDBQuery = new DataFromDBQuery();
		dbAccess.processQuery("SELECT id_registry_entry, every_x_week, start, id_ending FROM schdlr_weekly WHERE id=?", dataFromDBQuery);

		if (!dataFromDBQuery.idOK)
			throw new IllegalArgumentException("id = " + id + " does not exist");

		initExtraDbActions(id);

		this.id = id;
		this.idRegistryEntry = dataFromDBQuery.idRegistryEntry;
		this.everyXWeek = dataFromDBQuery.everyXWeek;
		everyXWeekStr = String.valueOf(everyXWeek);
		this.start = dataFromDBQuery.start;
		startStr = convertDateToString(start);
		this.idEnding = dataFromDBQuery.idEnding;

		postInitActions();
	}

	protected void initExtraDbActions(final long id) { }

	protected void postInitActions() { }

	@Override
	public void resetId() {
		id = 0;
	}

	public void refreshFromDataBase() {
		if (id == 0)
			throw new IllegalArgumentException("Cannot refresh bean not yet commited to database");

		setId(id);
	}

	@Override
	public boolean equals(final Object object) {
		if (id == 0)
			return false;

		if (object instanceof Weekly)
			return ((Weekly) object).getId() == id;

		return false;
	}

	@Override
	public int hashCode() {
		if (id == 0)
			return -1;

		return 31 * ((int) (id ^ (id >>> 32))) + 17;
	}

	@Override
	public String toString() {
		final ToStringMaker stringMaker = new ToStringMaker(this);
		stringMaker.addField("idRegistryEntry", idRegistryEntry);
		stringMaker.addField("everyXWeek", everyXWeek);
		stringMaker.addField("everyXWeekStr", everyXWeekStr);
		stringMaker.addField("start", start);
		stringMaker.addField("startStr", startStr);
		stringMaker.addField("idEnding", idEnding);
		return stringMaker.toString();
	}

	public void setIdRegistryEntry(final long idRegistryEntry) {
		this.idRegistryEntry = idRegistryEntry;
	}

	public void setRegistryEntry(final RegistryEntry registryEntry) {
		if (registryEntry.getId() == 0)
			throw new IllegalArgumentException("Cannot accept uninitialized RegistryEntry bean (id = 0) as argument.");

		idRegistryEntry = registryEntry.getId();
	}

	public void setEveryXWeek(final int everyXWeek) {
		this.everyXWeek = everyXWeek;
		everyXWeekStr = Integer.toString(everyXWeek);
	}

	public void setEveryXWeekStr(final String everyXWeekStr) {
		this.everyXWeekStr = everyXWeekStr;
	}

	public void setStart(final Date start) {
		if (start == null)
			this.start = null;
		else
			this.start = new Date(start.getTime());
		startStr = convertDateToString(start);
	}

	public void setStartStr(final String startStr) {
		this.startStr = startStr;
	}

	public void setIdEnding(final long idEnding) {
		this.idEnding = idEnding;
	}

	public void setEnding(final Ending ending) {
		if (ending.getId() == 0)
			throw new IllegalArgumentException("Cannot accept uninitialized Ending bean (id = 0) as argument.");

		idEnding = ending.getId();
	}

	@Override
	public long getId() {
		return id;
	}

	public long getIdRegistryEntry() {
		return idRegistryEntry;
	}

	public RegistryEntry getRegistryEntry() {
		return new RegistryEntry(idRegistryEntry);
	}

	public int getEveryXWeek() {
		return everyXWeek;
	}

	public String getEveryXWeekStr() {
		return everyXWeekStr;
	}

	public Date getStart() {
		if (start == null)
			return null;

		return new Date(start.getTime());
	}

	public String getStartStr() {
		return startStr;
	}

	public String getStartFormatted() {
		if (isStartEmpty()) {
			if (isStartRequired())
				throw new IllegalArgumentException("Cannot display bad data");
			return "";
		}

		if (!isStartOK())
			throw new IllegalArgumentException("Cannot display bad data");

		return formatDate(convertStringToDate(startStr));
	}

	public long getIdEnding() {
		return idEnding;
	}

	public Ending getEnding() {
		return new Ending(idEnding);
	}

	public String getIdRegistryEntryLabel() {
		return weeklyInternals.getLabel("idRegistryEntry");
	}

	public String getEveryXWeekLabel() {
		return weeklyInternals.getLabel("everyXWeek");
	}

	public String getStartLabel() {
		return weeklyInternals.getLabel("start");
	}

	public String getIdEndingLabel() {
		return weeklyInternals.getLabel("idEnding");
	}

	public boolean isIdRequired() {
		return true;
	}

	public boolean isIdRegistryEntryRequired() {
		return true;
	}

	public boolean isEveryXWeekRequired() {
		return true;
	}

	public boolean isStartRequired() {
		return true;
	}

	public boolean isIdEndingRequired() {
		return false;
	}

	public boolean isIdToBeUnique() {
		return true;
	}

	public boolean isIdRegistryEntryToBeUnique() {
		return true;
	}

	public boolean isEveryXWeekToBeUnique() {
		return false;
	}

	public boolean isStartToBeUnique() {
		return false;
	}

	public boolean isIdEndingToBeUnique() {
		return true;
	}

	@Override
	public void updateDB() {
		preUpdateConversions();

		if (id == 0) {
			createRecord();
			return;
		}

		if (id > 0) {
			updateRecord();
			return;
		}

		assert (false) : "id < 0 ?!?";
	}

	public long updateDB(final DBTransaction transaction) {
		if (WEEKLY_PARAMETERS.USE_CACHE)
			throw new UnsupportedOperationException("Cannot cache intermediate updates.");

		preUpdateConversions(transaction);

		if (id == 0) {
			id = createRecord(transaction);
			return id;
		}

		if (id > 0) {
			updateRecord(transaction);
			return id;
		}

		assert (false) : "id < 0 ?!?";
		return -1;
	}

	@Override
	public void preUpdateConversions() {
		preUpdateConversions(null);
	}

	protected void preUpdateConversions(final DBTransaction transaction) {
		if (!isDataOK(transaction))
			throw new IllegalArgumentException(ErrorMessage.toStrings(getErrorMessages()));

		everyXWeek = Strings.getIntVal(everyXWeekStr);
		if (!Strings.isEmpty(startStr))
			start = convertStringToDate(startStr);
		else
			start = null;
	}

	@Override
	public boolean isDataOK() {
		return isDataOK(null);
	}

	protected boolean isDataOK(final DBTransaction transaction) {
		weeklyInternals.clearErrorMessages();
		boolean ok = true;

		ok = checkDataForIdRegistryEntry(transaction) && ok;
		ok = checkDataForEveryXWeek() && ok;
		ok = checkDataForStart() && ok;
		ok = checkDataForIdEnding(transaction) && ok;

		return ok;
	}

	protected boolean checkDataForIdRegistryEntry() {
		return checkDataForIdRegistryEntry(null);
	}

	protected boolean checkDataForIdRegistryEntry(final DBTransaction transaction) {
		if (isIdRegistryEntryEmpty()) {
			if (isIdRegistryEntryRequired()) {
				weeklyInternals.addErrorMessage(id, "idRegistryEntry", getIdRegistryEntryLabel(), getIdRegistryEntryEmptyErrorMessage());
				return false;
			}
		} else if (!isIdRegistryEntryOK(transaction)) {
			weeklyInternals.addErrorMessage(id, "idRegistryEntry", getIdRegistryEntryLabel(), getIdRegistryEntryBadFormatErrorMessage());
			return false;
		} else if (isIdRegistryEntryToBeUnique() && !isIdRegistryEntryUnique()) {
			weeklyInternals.addErrorMessage(id, "idRegistryEntry", getIdRegistryEntryLabel(), getIdRegistryEntryNotUniqueErrorMessage());
			return false;
		}

		return true;
	}

	protected boolean checkDataForEveryXWeek() {
		if (isEveryXWeekEmpty()) {
			if (isEveryXWeekRequired()) {
				weeklyInternals.addErrorMessage(id, "everyXWeek", getEveryXWeekLabel(), getEveryXWeekEmptyErrorMessage());
				return false;
			}
		} else if (!isEveryXWeekOK()) {
			weeklyInternals.addErrorMessage(id, "everyXWeek", getEveryXWeekLabel(), getEveryXWeekBadFormatErrorMessage());
			return false;
		} else if (isEveryXWeekToBeUnique() && !isEveryXWeekUnique()) {
			weeklyInternals.addErrorMessage(id, "everyXWeek", getEveryXWeekLabel(), getEveryXWeekNotUniqueErrorMessage());
			return false;
		}

		return true;
	}

	protected boolean checkDataForStart() {
		if (isStartEmpty()) {
			if (isStartRequired()) {
				weeklyInternals.addErrorMessage(id, "start", getStartLabel(), getStartEmptyErrorMessage());
				return false;
			}
		} else if (!isStartOK()) {
			weeklyInternals.addErrorMessage(id, "start", getStartLabel(), getStartBadFormatErrorMessage());
			return false;
		} else if (isStartToBeUnique() && !isStartUnique()) {
			weeklyInternals.addErrorMessage(id, "start", getStartLabel(), getStartNotUniqueErrorMessage());
			return false;
		}

		return true;
	}

	protected boolean checkDataForIdEnding() {
		return checkDataForIdEnding(null);
	}

	protected boolean checkDataForIdEnding(final DBTransaction transaction) {
		if (isIdEndingEmpty()) {
			if (isIdEndingRequired()) {
				weeklyInternals.addErrorMessage(id, "idEnding", getIdEndingLabel(), getIdEndingEmptyErrorMessage());
				return false;
			}
		} else if (!isIdEndingOK(transaction)) {
			weeklyInternals.addErrorMessage(id, "idEnding", getIdEndingLabel(), getIdEndingBadFormatErrorMessage());
			return false;
		} else if (isIdEndingToBeUnique() && !isIdEndingUnique()) {
			weeklyInternals.addErrorMessage(id, "idEnding", getIdEndingLabel(), getIdEndingNotUniqueErrorMessage());
			return false;
		}

		return true;
	}

	public boolean isIdRegistryEntryEmpty() {
		return idRegistryEntry == 0;
	}

	public boolean isEveryXWeekEmpty() {
		return Strings.isEmpty(everyXWeekStr);
	}

	public boolean isStartEmpty() {
		return Strings.isEmpty(startStr);
	}

	public boolean isIdEndingEmpty() {
		return idEnding == 0;
	}

	public String getIdRegistryEntryEmptyErrorMessage() {
		return weeklyInternals.getRequiredErrorMessage("idRegistryEntry");
	}

	public String getEveryXWeekEmptyErrorMessage() {
		return weeklyInternals.getRequiredErrorMessage("everyXWeek");
	}

	public String getStartEmptyErrorMessage() {
		return weeklyInternals.getRequiredErrorMessage("start");
	}

	public String getIdEndingEmptyErrorMessage() {
		return weeklyInternals.getRequiredErrorMessage("idEnding");
	}

	public boolean isIdRegistryEntryOK() {
		return isIdRegistryEntryOK(null);
	}

	protected boolean isIdRegistryEntryOK(final DBTransaction transaction) {
		if (transaction == null)
			return RegistryEntry.isIdOK(idRegistryEntry);

		return RegistryEntry.isIdOK(idRegistryEntry, transaction);
	}

	public boolean isEveryXWeekOK() {
		return FormatCheckHelper.isIntNumber(everyXWeekStr);
	}

	public boolean isStartOK() {
		return validateDateFormat(startStr);
	}

	public boolean isIdEndingOK() {
		return isIdEndingOK(null);
	}

	protected boolean isIdEndingOK(final DBTransaction transaction) {
		if (transaction == null)
			return Ending.isIdOK(idEnding);

		return Ending.isIdOK(idEnding, transaction);
	}

	public String getIdRegistryEntryBadFormatErrorMessage() {
		return weeklyInternals.getBadFormatErrorMessage("idRegistryEntry");
	}

	public String getEveryXWeekBadFormatErrorMessage() {
		return weeklyInternals.getBadFormatErrorMessage("everyXWeek");
	}

	public String getStartBadFormatErrorMessage() {
		return weeklyInternals.getBadFormatErrorMessage("start");
	}

	public String getIdEndingBadFormatErrorMessage() {
		return weeklyInternals.getBadFormatErrorMessage("idEnding");
	}

	public boolean isIdRegistryEntryUnique() {
		return !dbAccess.processQuery("SELECT id FROM schdlr_weekly WHERE id_registry_entry=? AND id <> ?", new BooleanCheckQuery() {
			@Override
			public void setupPreparedStatement(final PreparedStatement stat) throws SQLException {
				stat.setLong(1, idRegistryEntry);
				stat.setLong(2, id);
			}
		});
	}

	public boolean isEveryXWeekUnique() {
		return !dbAccess.processQuery("SELECT id FROM schdlr_weekly WHERE every_x_week=? AND id <> ?", new BooleanCheckQuery() {
			@Override
			public void setupPreparedStatement(final PreparedStatement stat) throws SQLException {
				stat.setInt(1, everyXWeek);
				stat.setLong(2, id);
			}
		});
	}

	public boolean isStartUnique() {
		return !dbAccess.processQuery("SELECT id FROM schdlr_weekly WHERE start=? AND id <> ?", new BooleanCheckQuery() {
			@Override
			public void setupPreparedStatement(final PreparedStatement stat) throws SQLException {
				stat.setDate(1, start);
				stat.setLong(2, id);
			}
		});
	}

	public boolean isIdEndingUnique() {
		return !dbAccess.processQuery("SELECT id FROM schdlr_weekly WHERE id_ending=? AND id <> ?", new BooleanCheckQuery() {
			@Override
			public void setupPreparedStatement(final PreparedStatement stat) throws SQLException {
				stat.setLong(1, idEnding);
				stat.setLong(2, id);
			}
		});
	}

	public String getIdRegistryEntryNotUniqueErrorMessage() {
		return weeklyInternals.getNotUniqueErrorMessage("idRegistryEntry");
	}

	public String getEveryXWeekNotUniqueErrorMessage() {
		return weeklyInternals.getNotUniqueErrorMessage("everyXWeek");
	}

	public String getStartNotUniqueErrorMessage() {
		return weeklyInternals.getNotUniqueErrorMessage("start");
	}

	public String getIdEndingNotUniqueErrorMessage() {
		return weeklyInternals.getNotUniqueErrorMessage("idEnding");
	}

	@Override
	public List<ErrorMessage> getErrorMessages() {
		return weeklyInternals.getErrorMessages();
	}

	@Override
	public void reset() {
		idRegistryEntry = 0;
		everyXWeek = 0;
		everyXWeekStr = "";
		start = null;
		startStr = "";
		idEnding = 0;
		weeklyInternals.clearErrorMessages();
	}

	@Override
	public void fullReset() {
		reset();
		id = 0;
	}

	@Override
	public void delete() {
		final DBTransaction transaction = createDBTransaction();
		delete(transaction);
		transaction.commit();

		postDeleteActions();

		if (WEEKLY_PARAMETERS.USE_CACHE)
			WEEKLY_PARAMETERS.CACHE_SET.delete(id);

		fullReset();
	}

	public void delete(final DBTransaction transaction) {
		preDeleteExtraDbActions(transaction);
		transaction.addUpdate("DELETE FROM schdlr_weekly WHERE id=?", new DBQuerySetup() {
				@Override
				public void setupPreparedStatement(final PreparedStatement stat) throws SQLException {
					stat.setLong(1, id);
				}
			});
		deleteExtraDbActions(transaction);
	}

	protected void preDeleteExtraDbActions(final DBTransaction transaction) { }

	protected void deleteExtraDbActions(final DBTransaction transaction) { }

	protected void postDeleteActions() { }

	private class RecordCreationSetup implements DBQuerySetup {
		@Override
		public void setupPreparedStatement(final PreparedStatement stat) throws SQLException {
			stat.setLong(1, idRegistryEntry);
			stat.setInt(2, everyXWeek);
			stat.setDate(3, start);
			if (idEnding == 0)
				stat.setNull(4, java.sql.Types.INTEGER);
			else
				stat.setLong(4, idEnding);
		}
	}

	private class RecordUpdateSetup extends RecordCreationSetup {
		@Override
		public void setupPreparedStatement(final PreparedStatement stat) throws SQLException {
			super.setupPreparedStatement(stat);
			stat.setLong(5, id);
		}
	}

	private void createRecord() {
		final DBTransaction transaction = createDBTransaction();
		id = createRecord(transaction);
		transaction.commit();
		postCreateActions();
		updateCaching();
	}

	private long createRecord(final DBTransaction transaction) {
		preCreateExtraDbActions(transaction);
		final long id = transaction.addRecordCreation("INSERT INTO schdlr_weekly (id_registry_entry, every_x_week, start, id_ending) VALUES (?, ?, ?, ?)", new RecordCreationSetup());
		createExtraDbActions(transaction, id);
		return id;
	}

	protected void preCreateExtraDbActions(final DBTransaction transaction) { }

	protected void createExtraDbActions(final DBTransaction transaction, final long id) { }

	protected void postCreateActions() { }

	private void updateRecord() {
		final DBTransaction transaction = createDBTransaction();
		updateRecord(transaction);
		transaction.commit();
		postUpdateActions();
		updateCaching();
	}

	private void updateRecord(final DBTransaction transaction) {
		preUpdateExtraDbActions(transaction);
		transaction.addUpdate("UPDATE schdlr_weekly SET id_registry_entry=?, every_x_week=?, start=?, id_ending=? WHERE id=?", new RecordUpdateSetup());
		updateExtraDbActions(transaction);
	}

	protected void preUpdateExtraDbActions(final DBTransaction transaction) { }

	protected void updateExtraDbActions(final DBTransaction transaction) { }

	protected void postUpdateActions() { }

	private void updateCaching() {
		if (WEEKLY_PARAMETERS.USE_CACHE)
			WEEKLY_PARAMETERS.CACHE_SET.submit((Weekly) this);
	}

	protected String formatDate(final Date date) {
		return DateFormat.getDateInstance(DateFormat.LONG, weeklyInternals.getLocale()).format(date);
	}

	protected Date convertStringToDate(final String str) {
		return Dates.getDateFromYYMD(str, "-");
	}

	protected String convertDateToString(final Date date) {
		if (date == null)
			return "";

		return date.toString();
	}

	protected boolean validateDateFormat(final String str) {
		final SimpleInputDateFormat simpleInputDateFormat = new SimpleInputDateFormat(SimpleInputDateFormat.ElementOrder.YYMD, "-");
		return simpleInputDateFormat.validate(str);
	}

	public static List<Weekly> getAll() {
		return getAll(WEEKLY_PARAMETERS.getOrderByFields());
	}

	protected static List<Weekly> getAll(final String orderBy) {
		return getSelection(null, orderBy, null);
	}

	private static class GetSelectionQueryProcess implements DBQueryRetrieveData<List<Weekly>> {
		@Override
		public List<Weekly> processResultSet(final ResultSet rs) throws SQLException {
			final List<Weekly> list = new ArrayList<Weekly>();

			while (rs.next())
				list.add(new Weekly(rs.getLong(1), rs.getLong(2), rs.getInt(3), rs.getDate(4), rs.getLong(5)));


			return list;
		}
	}

	protected static List<Weekly> getSelection(final String whereClause) {
		return getSelection(whereClause, null);
	}

	protected static List<Weekly> getSelection(final String whereClause, final DBQuerySetup setup) {
		return getSelection(whereClause, WEEKLY_PARAMETERS.getOrderByFields(), setup);
	}

	protected static List<Weekly> getSelection(final String whereClause, final String orderBy, final DBQuerySetup setup) {
		if (whereClause == null && setup != null)
			throw new IllegalArgumentException("Cannot accept setup code without a WHERE clause.");

		final StringBuilder query = new StringBuilder();
		query.append("SELECT id, id_registry_entry, every_x_week, start, id_ending FROM schdlr_weekly");
		if (whereClause != null)
			query.append(" WHERE ").append(whereClause);
		if (orderBy != null)
			query.append(" ORDER BY ").append(orderBy);

		if (whereClause == null || setup == null)
			return dbAccess.processQuery(query.toString(), new GetSelectionQueryProcess());

		return dbAccess.processQuery(query.toString(), setup, new GetSelectionQueryProcess());
	}

	private static class GetSelectionCountQueryProcess implements DBQueryRetrieveData<Long> {
		@Override
		public Long processResultSet(final ResultSet rs) throws SQLException {
			rs.next();
			return rs.getLong(1);
		}
	}

	protected static long getSelectionCount(final String whereClause) {
		return getSelectionCount(whereClause, null);
	}

	protected static long getSelectionCount(final String whereClause, final DBQuerySetup setup) {
		final String query = "SELECT COUNT(id) FROM schdlr_weekly WHERE " + whereClause;

		if (setup == null)
			return dbAccess.processQuery(query, new GetSelectionCountQueryProcess());

		return dbAccess.processQuery(query, setup, new GetSelectionCountQueryProcess());
	}

	public static List<IdNamePair> getIdNamePairs(final List<String> dataFields, final List<String> orderingFields) {
		return getIdNamePairs(null, dataFields, orderingFields);
	}

	protected static List<IdNamePair> getIdNamePairs(final String whereClause, final List<String> dataFields, final List<String> orderingFields) {
		return DBQueries.getIdNamePairs(db, "schdlr_weekly", whereClause, dataFields, orderingFields);
	}

	public static long getCount() {
		return DBQueries.getLongCount(db, "schdlr_weekly");
	}

	public static boolean isIdOK(final long id) {
		return DBQueries.isIdOK(db, "schdlr_weekly", id);
	}

	public static boolean isIdOK(final long id, final DBTransaction transaction) {
		return DBQueries.isIdOK(transaction, "schdlr_weekly", id);
	}

	public static String getHumanReadableTitle(final long id) {
		if (id == 0)
			return "";

		return DBQueries.getHumanReadableTitle(db, "schdlr_weekly", id, WEEKLY_PARAMETERS.getNamingFields());
	}

	public static List<Weekly> getList(final ResultSet rs) throws SQLException {
		final List<Weekly> list = new ArrayList<Weekly>();

		while (rs.next())
			list.add(new Weekly(rs));


		return list;
	}

	@Override
	public void setLocale(final Locale locale) {
		weeklyInternals.setLocale(locale);
	}

}

