// Generated by BeanMaker, on April 1, 2018 2:00:46 AM CEST
// Library Version #0.9.12-beta

package org.dbbeans.scheduler;

import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.text.DateFormat;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import org.beanmaker.util.BeanInternals;
import org.beanmaker.util.DBQueries;
import org.beanmaker.util.DbBeanInterface;
import org.beanmaker.util.ErrorMessage;
import org.beanmaker.util.FormatCheckHelper;
import org.beanmaker.util.IdNamePair;
import org.beanmaker.util.ToStringMaker;

import org.dbbeans.sql.DBQueryRetrieveData;
import org.dbbeans.sql.DBQuerySetup;
import org.dbbeans.sql.DBQuerySetupProcess;
import org.dbbeans.sql.DBTransaction;

import org.dbbeans.sql.queries.BooleanCheckQuery;

import org.dbbeans.util.Dates;
import org.dbbeans.util.SimpleInputDateFormat;
import org.dbbeans.util.Strings;

public abstract class EndingBase extends DbBean implements DbBeanInterface {
	private long id;
	private Date endsOn;
	private String endsOnStr = "";
	private int endsAfterXTimes;
	private String endsAfterXTimesStr = "";

	protected static final String DATABASE_TABLE_NAME = "schdlr_endings";
	protected static final String DATABASE_FIELD_LIST = "schdlr_endings.id, schdlr_endings.ends_on, schdlr_endings.ends_after_x_times";

	protected final BeanInternals endingInternals = new BeanInternals("org-dbbeans-scheduler-Ending");
	protected static final EndingParameters ENDING_PARAMETERS = new EndingParameters();

	public EndingBase() { }

	public EndingBase(final long id) {
		setId(id);
	}

	public EndingBase(final EndingBase endingModel) {
		id = 0;
		setEndsOn(endingModel.endsOn);
		setEndsAfterXTimes(endingModel.endsAfterXTimes);
	}

	protected EndingBase(final long id, final Date endsOn, final int endsAfterXTimes) {
		this.id = id;
		setEndsOn(endsOn);
		setEndsAfterXTimes(endsAfterXTimes);
	}

	protected EndingBase(final ResultSet rs) throws SQLException {
		this(rs.getLong(1), rs.getDate(2), rs.getInt(3));
	}

	@Override
	public void setId(final long id) {
		class DataFromDBQuery implements DBQuerySetupProcess {
			Date endsOn = null;
			int endsAfterXTimes = 0;
			boolean idOK = false;

			@Override
			public void setupPreparedStatement(final PreparedStatement stat) throws SQLException {
				stat.setLong(1, id);
			}

			@Override
			public void processResultSet(final ResultSet rs) throws SQLException {
				if (rs.next()) {
					endsOn = rs.getDate(1);
					endsAfterXTimes = rs.getInt(2);
					idOK = true;
				}
			}
		}

		if (id <= 0)
			throw new IllegalArgumentException("id = " + id + " <= 0");

		final DataFromDBQuery dataFromDBQuery = new DataFromDBQuery();
		dbAccess.processQuery("SELECT ends_on, ends_after_x_times FROM schdlr_endings WHERE id=?", dataFromDBQuery);

		if (!dataFromDBQuery.idOK)
			throw new IllegalArgumentException("id = " + id + " does not exist");

		initExtraDbActions(id);

		this.id = id;
		this.endsOn = dataFromDBQuery.endsOn;
		endsOnStr = convertDateToString(endsOn);
		this.endsAfterXTimes = dataFromDBQuery.endsAfterXTimes;
		endsAfterXTimesStr = String.valueOf(endsAfterXTimes);

		postInitActions();
	}

	protected void initExtraDbActions(final long id) { }

	protected void postInitActions() { }

	@Override
	public void resetId() {
		id = 0;
	}

	public void refreshFromDataBase() {
		if (id == 0)
			throw new IllegalArgumentException("Cannot refresh bean not yet commited to database");

		setId(id);
	}

	@Override
	public boolean equals(final Object object) {
		if (id == 0)
			return false;

		if (object instanceof Ending)
			return ((Ending) object).getId() == id;

		return false;
	}

	@Override
	public int hashCode() {
		if (id == 0)
			return -1;

		return 31 * ((int) (id ^ (id >>> 32))) + 17;
	}

	@Override
	public String toString() {
		final ToStringMaker stringMaker = new ToStringMaker(this);
		stringMaker.addField("endsOn", endsOn);
		stringMaker.addField("endsOnStr", endsOnStr);
		stringMaker.addField("endsAfterXTimes", endsAfterXTimes);
		stringMaker.addField("endsAfterXTimesStr", endsAfterXTimesStr);
		return stringMaker.toString();
	}

	public void setEndsOn(final Date endsOn) {
		if (endsOn == null)
			this.endsOn = null;
		else
			this.endsOn = new Date(endsOn.getTime());
		endsOnStr = convertDateToString(endsOn);
	}

	public void setEndsOnStr(final String endsOnStr) {
		this.endsOnStr = endsOnStr;
	}

	public void setEndsAfterXTimes(final int endsAfterXTimes) {
		this.endsAfterXTimes = endsAfterXTimes;
		endsAfterXTimesStr = Integer.toString(endsAfterXTimes);
	}

	public void setEndsAfterXTimesStr(final String endsAfterXTimesStr) {
		this.endsAfterXTimesStr = endsAfterXTimesStr;
	}

	@Override
	public long getId() {
		return id;
	}

	public Date getEndsOn() {
		if (endsOn == null)
			return null;

		return new Date(endsOn.getTime());
	}

	public String getEndsOnStr() {
		return endsOnStr;
	}

	public String getEndsOnFormatted() {
		if (isEndsOnEmpty()) {
			if (isEndsOnRequired())
				throw new IllegalArgumentException("Cannot display bad data");
			return "";
		}

		if (!isEndsOnOK())
			throw new IllegalArgumentException("Cannot display bad data");

		return formatDate(convertStringToDate(endsOnStr));
	}

	public int getEndsAfterXTimes() {
		return endsAfterXTimes;
	}

	public String getEndsAfterXTimesStr() {
		return endsAfterXTimesStr;
	}

	public String getEndsOnLabel() {
		return endingInternals.getLabel("endsOn");
	}

	public String getEndsAfterXTimesLabel() {
		return endingInternals.getLabel("endsAfterXTimes");
	}

	public boolean isIdRequired() {
		return true;
	}

	public boolean isEndsOnRequired() {
		return false;
	}

	public boolean isEndsAfterXTimesRequired() {
		return true;
	}

	public boolean isIdToBeUnique() {
		return true;
	}

	public boolean isEndsOnToBeUnique() {
		return false;
	}

	public boolean isEndsAfterXTimesToBeUnique() {
		return false;
	}

	@Override
	public void updateDB() {
		preUpdateConversions();

		if (id == 0) {
			createRecord();
			return;
		}

		if (id > 0) {
			updateRecord();
			return;
		}

		assert (false) : "id < 0 ?!?";
	}

	public long updateDB(final DBTransaction transaction) {
		if (ENDING_PARAMETERS.USE_CACHE)
			throw new UnsupportedOperationException("Cannot cache intermediate updates.");

		preUpdateConversions(transaction);

		if (id == 0) {
			id = createRecord(transaction);
			return id;
		}

		if (id > 0) {
			updateRecord(transaction);
			return id;
		}

		assert (false) : "id < 0 ?!?";
		return -1;
	}

	@Override
	public void preUpdateConversions() {
		preUpdateConversions(null);
	}

	protected void preUpdateConversions(final DBTransaction transaction) {
		if (!isDataOK(transaction))
			throw new IllegalArgumentException(ErrorMessage.toStrings(getErrorMessages()));

		if (!Strings.isEmpty(endsOnStr))
			endsOn = convertStringToDate(endsOnStr);
		else
			endsOn = null;
		endsAfterXTimes = Strings.getIntVal(endsAfterXTimesStr);
	}

	@Override
	public boolean isDataOK() {
		return isDataOK(null);
	}

	protected boolean isDataOK(final DBTransaction transaction) {
		endingInternals.clearErrorMessages();
		boolean ok = true;

		ok = checkDataForEndsOn() && ok;
		ok = checkDataForEndsAfterXTimes() && ok;

		return ok;
	}

	protected boolean checkDataForEndsOn() {
		if (isEndsOnEmpty()) {
			if (isEndsOnRequired()) {
				endingInternals.addErrorMessage(id, "endsOn", getEndsOnLabel(), getEndsOnEmptyErrorMessage());
				return false;
			}
		} else if (!isEndsOnOK()) {
			endingInternals.addErrorMessage(id, "endsOn", getEndsOnLabel(), getEndsOnBadFormatErrorMessage());
			return false;
		} else if (isEndsOnToBeUnique() && !isEndsOnUnique()) {
			endingInternals.addErrorMessage(id, "endsOn", getEndsOnLabel(), getEndsOnNotUniqueErrorMessage());
			return false;
		}

		return true;
	}

	protected boolean checkDataForEndsAfterXTimes() {
		if (isEndsAfterXTimesEmpty()) {
			if (isEndsAfterXTimesRequired()) {
				endingInternals.addErrorMessage(id, "endsAfterXTimes", getEndsAfterXTimesLabel(), getEndsAfterXTimesEmptyErrorMessage());
				return false;
			}
		} else if (!isEndsAfterXTimesOK()) {
			endingInternals.addErrorMessage(id, "endsAfterXTimes", getEndsAfterXTimesLabel(), getEndsAfterXTimesBadFormatErrorMessage());
			return false;
		} else if (isEndsAfterXTimesToBeUnique() && !isEndsAfterXTimesUnique()) {
			endingInternals.addErrorMessage(id, "endsAfterXTimes", getEndsAfterXTimesLabel(), getEndsAfterXTimesNotUniqueErrorMessage());
			return false;
		}

		return true;
	}

	public boolean isEndsOnEmpty() {
		return Strings.isEmpty(endsOnStr);
	}

	public boolean isEndsAfterXTimesEmpty() {
		return Strings.isEmpty(endsAfterXTimesStr);
	}

	public String getEndsOnEmptyErrorMessage() {
		return endingInternals.getRequiredErrorMessage("endsOn");
	}

	public String getEndsAfterXTimesEmptyErrorMessage() {
		return endingInternals.getRequiredErrorMessage("endsAfterXTimes");
	}

	public boolean isEndsOnOK() {
		return validateDateFormat(endsOnStr);
	}

	public boolean isEndsAfterXTimesOK() {
		return FormatCheckHelper.isIntNumber(endsAfterXTimesStr);
	}

	public String getEndsOnBadFormatErrorMessage() {
		return endingInternals.getBadFormatErrorMessage("endsOn");
	}

	public String getEndsAfterXTimesBadFormatErrorMessage() {
		return endingInternals.getBadFormatErrorMessage("endsAfterXTimes");
	}

	public boolean isEndsOnUnique() {
		return !dbAccess.processQuery("SELECT id FROM schdlr_endings WHERE ends_on=? AND id <> ?", new BooleanCheckQuery() {
			@Override
			public void setupPreparedStatement(final PreparedStatement stat) throws SQLException {
				stat.setDate(1, endsOn);
				stat.setLong(2, id);
			}
		});
	}

	public boolean isEndsAfterXTimesUnique() {
		return !dbAccess.processQuery("SELECT id FROM schdlr_endings WHERE ends_after_x_times=? AND id <> ?", new BooleanCheckQuery() {
			@Override
			public void setupPreparedStatement(final PreparedStatement stat) throws SQLException {
				stat.setInt(1, endsAfterXTimes);
				stat.setLong(2, id);
			}
		});
	}

	public String getEndsOnNotUniqueErrorMessage() {
		return endingInternals.getNotUniqueErrorMessage("endsOn");
	}

	public String getEndsAfterXTimesNotUniqueErrorMessage() {
		return endingInternals.getNotUniqueErrorMessage("endsAfterXTimes");
	}

	@Override
	public List<ErrorMessage> getErrorMessages() {
		return endingInternals.getErrorMessages();
	}

	@Override
	public void reset() {
		endsOn = null;
		endsOnStr = "";
		endsAfterXTimes = 0;
		endsAfterXTimesStr = "";
		endingInternals.clearErrorMessages();
	}

	@Override
	public void fullReset() {
		reset();
		id = 0;
	}

	@Override
	public void delete() {
		final DBTransaction transaction = createDBTransaction();
		delete(transaction);
		transaction.commit();

		postDeleteActions();

		if (ENDING_PARAMETERS.USE_CACHE)
			ENDING_PARAMETERS.CACHE_SET.delete(id);

		fullReset();
	}

	public void delete(final DBTransaction transaction) {
		preDeleteExtraDbActions(transaction);
		transaction.addUpdate("DELETE FROM schdlr_endings WHERE id=?", new DBQuerySetup() {
				@Override
				public void setupPreparedStatement(final PreparedStatement stat) throws SQLException {
					stat.setLong(1, id);
				}
			});
		deleteExtraDbActions(transaction);
	}

	protected void preDeleteExtraDbActions(final DBTransaction transaction) { }

	protected void deleteExtraDbActions(final DBTransaction transaction) { }

	protected void postDeleteActions() { }

	private class RecordCreationSetup implements DBQuerySetup {
		@Override
		public void setupPreparedStatement(final PreparedStatement stat) throws SQLException {
			if (endsOn == null)
				stat.setNull(1, java.sql.Types.DATE);
			else
				stat.setDate(1, endsOn);
			stat.setInt(2, endsAfterXTimes);
		}
	}

	private class RecordUpdateSetup extends RecordCreationSetup {
		@Override
		public void setupPreparedStatement(final PreparedStatement stat) throws SQLException {
			super.setupPreparedStatement(stat);
			stat.setLong(3, id);
		}
	}

	private void createRecord() {
		final DBTransaction transaction = createDBTransaction();
		id = createRecord(transaction);
		transaction.commit();
		postCreateActions();
		updateCaching();
	}

	private long createRecord(final DBTransaction transaction) {
		preCreateExtraDbActions(transaction);
		final long id = transaction.addRecordCreation("INSERT INTO schdlr_endings (ends_on, ends_after_x_times) VALUES (?, ?)", new RecordCreationSetup());
		createExtraDbActions(transaction, id);
		return id;
	}

	protected void preCreateExtraDbActions(final DBTransaction transaction) { }

	protected void createExtraDbActions(final DBTransaction transaction, final long id) { }

	protected void postCreateActions() { }

	private void updateRecord() {
		final DBTransaction transaction = createDBTransaction();
		updateRecord(transaction);
		transaction.commit();
		postUpdateActions();
		updateCaching();
	}

	private void updateRecord(final DBTransaction transaction) {
		preUpdateExtraDbActions(transaction);
		transaction.addUpdate("UPDATE schdlr_endings SET ends_on=?, ends_after_x_times=? WHERE id=?", new RecordUpdateSetup());
		updateExtraDbActions(transaction);
	}

	protected void preUpdateExtraDbActions(final DBTransaction transaction) { }

	protected void updateExtraDbActions(final DBTransaction transaction) { }

	protected void postUpdateActions() { }

	private void updateCaching() {
		if (ENDING_PARAMETERS.USE_CACHE)
			ENDING_PARAMETERS.CACHE_SET.submit((Ending) this);
	}

	protected String formatDate(final Date date) {
		return DateFormat.getDateInstance(DateFormat.LONG, endingInternals.getLocale()).format(date);
	}

	protected Date convertStringToDate(final String str) {
		return Dates.getDateFromYYMD(str, "-");
	}

	protected String convertDateToString(final Date date) {
		if (date == null)
			return "";

		return date.toString();
	}

	protected boolean validateDateFormat(final String str) {
		final SimpleInputDateFormat simpleInputDateFormat = new SimpleInputDateFormat(SimpleInputDateFormat.ElementOrder.YYMD, "-");
		return simpleInputDateFormat.validate(str);
	}

	public static List<Ending> getAll() {
		return getAll(ENDING_PARAMETERS.getOrderByFields());
	}

	protected static List<Ending> getAll(final String orderBy) {
		return getSelection(null, orderBy, null);
	}

	private static class GetSelectionQueryProcess implements DBQueryRetrieveData<List<Ending>> {
		@Override
		public List<Ending> processResultSet(final ResultSet rs) throws SQLException {
			final List<Ending> list = new ArrayList<Ending>();

			while (rs.next())
				list.add(new Ending(rs.getLong(1), rs.getDate(2), rs.getInt(3)));


			return list;
		}
	}

	protected static List<Ending> getSelection(final String whereClause) {
		return getSelection(whereClause, null);
	}

	protected static List<Ending> getSelection(final String whereClause, final DBQuerySetup setup) {
		return getSelection(whereClause, ENDING_PARAMETERS.getOrderByFields(), setup);
	}

	protected static List<Ending> getSelection(final String whereClause, final String orderBy, final DBQuerySetup setup) {
		if (whereClause == null && setup != null)
			throw new IllegalArgumentException("Cannot accept setup code without a WHERE clause.");

		final StringBuilder query = new StringBuilder();
		query.append("SELECT id, ends_on, ends_after_x_times FROM schdlr_endings");
		if (whereClause != null)
			query.append(" WHERE ").append(whereClause);
		if (orderBy != null)
			query.append(" ORDER BY ").append(orderBy);

		if (whereClause == null || setup == null)
			return dbAccess.processQuery(query.toString(), new GetSelectionQueryProcess());

		return dbAccess.processQuery(query.toString(), setup, new GetSelectionQueryProcess());
	}

	private static class GetSelectionCountQueryProcess implements DBQueryRetrieveData<Long> {
		@Override
		public Long processResultSet(final ResultSet rs) throws SQLException {
			rs.next();
			return rs.getLong(1);
		}
	}

	protected static long getSelectionCount(final String whereClause) {
		return getSelectionCount(whereClause, null);
	}

	protected static long getSelectionCount(final String whereClause, final DBQuerySetup setup) {
		final String query = "SELECT COUNT(id) FROM schdlr_endings WHERE " + whereClause;

		if (setup == null)
			return dbAccess.processQuery(query, new GetSelectionCountQueryProcess());

		return dbAccess.processQuery(query, setup, new GetSelectionCountQueryProcess());
	}

	public static List<IdNamePair> getIdNamePairs(final List<String> dataFields, final List<String> orderingFields) {
		return getIdNamePairs(null, dataFields, orderingFields);
	}

	protected static List<IdNamePair> getIdNamePairs(final String whereClause, final List<String> dataFields, final List<String> orderingFields) {
		return DBQueries.getIdNamePairs(db, "schdlr_endings", whereClause, dataFields, orderingFields);
	}

	public static long getCount() {
		return DBQueries.getLongCount(db, "schdlr_endings");
	}

	public static boolean isIdOK(final long id) {
		return DBQueries.isIdOK(db, "schdlr_endings", id);
	}

	public static boolean isIdOK(final long id, final DBTransaction transaction) {
		return DBQueries.isIdOK(transaction, "schdlr_endings", id);
	}

	public static String getHumanReadableTitle(final long id) {
		if (id == 0)
			return "";

		return DBQueries.getHumanReadableTitle(db, "schdlr_endings", id, ENDING_PARAMETERS.getNamingFields());
	}

	public static List<Ending> getList(final ResultSet rs) throws SQLException {
		final List<Ending> list = new ArrayList<Ending>();

		while (rs.next())
			list.add(new Ending(rs));


		return list;
	}

	@Override
	public void setLocale(final Locale locale) {
		endingInternals.setLocale(locale);
	}

}

