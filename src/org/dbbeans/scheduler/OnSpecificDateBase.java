// Generated by BeanMaker, on April 1, 2018 4:18:32 AM CEST
// Library Version #0.9.12-beta

package org.dbbeans.scheduler;

import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.text.DateFormat;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import org.beanmaker.util.BeanInternals;
import org.beanmaker.util.DBQueries;
import org.beanmaker.util.DbBeanInterface;
import org.beanmaker.util.ErrorMessage;
import org.beanmaker.util.IdNamePair;
import org.beanmaker.util.ToStringMaker;

import org.dbbeans.sql.DBQueryRetrieveData;
import org.dbbeans.sql.DBQuerySetup;
import org.dbbeans.sql.DBQuerySetupProcess;
import org.dbbeans.sql.DBTransaction;

import org.dbbeans.sql.queries.BooleanCheckQuery;

import org.dbbeans.util.Dates;
import org.dbbeans.util.SimpleInputDateFormat;
import org.dbbeans.util.Strings;

public abstract class OnSpecificDateBase extends DbBean implements DbBeanInterface {
	private long id;
	private long idRegistryEntry;
	private Date when;
	private String whenStr = "";

	protected static final String DATABASE_TABLE_NAME = "schdlr_on_specific_date";
	protected static final String DATABASE_FIELD_LIST = "schdlr_on_specific_date.id, schdlr_on_specific_date.id_registry_entry, schdlr_on_specific_date.when";

	protected final BeanInternals onSpecificDateInternals = new BeanInternals("org-dbbeans-scheduler-OnSpecificDate");
	protected static final OnSpecificDateParameters ON_SPECIFIC_DATE_PARAMETERS = new OnSpecificDateParameters();

	public OnSpecificDateBase() { }

	public OnSpecificDateBase(final long id) {
		setId(id);
	}

	public OnSpecificDateBase(final OnSpecificDateBase onSpecificDateModel) {
		id = 0;
		idRegistryEntry = onSpecificDateModel.idRegistryEntry;
		setWhen(onSpecificDateModel.when);
	}

	protected OnSpecificDateBase(final long id, final long idRegistryEntry, final Date when) {
		this.id = id;
		this.idRegistryEntry = idRegistryEntry;
		setWhen(when);
	}

	protected OnSpecificDateBase(final ResultSet rs) throws SQLException {
		this(rs.getLong(1), rs.getLong(2), rs.getDate(3));
	}

	@Override
	public void setId(final long id) {
		class DataFromDBQuery implements DBQuerySetupProcess {
			long idRegistryEntry = 0;
			Date when = null;
			boolean idOK = false;

			@Override
			public void setupPreparedStatement(final PreparedStatement stat) throws SQLException {
				stat.setLong(1, id);
			}

			@Override
			public void processResultSet(final ResultSet rs) throws SQLException {
				if (rs.next()) {
					idRegistryEntry = rs.getLong(1);
					when = rs.getDate(2);
					idOK = true;
				}
			}
		}

		if (id <= 0)
			throw new IllegalArgumentException("id = " + id + " <= 0");

		final DataFromDBQuery dataFromDBQuery = new DataFromDBQuery();
		dbAccess.processQuery("SELECT id_registry_entry, when FROM schdlr_on_specific_date WHERE id=?", dataFromDBQuery);

		if (!dataFromDBQuery.idOK)
			throw new IllegalArgumentException("id = " + id + " does not exist");

		initExtraDbActions(id);

		this.id = id;
		this.idRegistryEntry = dataFromDBQuery.idRegistryEntry;
		this.when = dataFromDBQuery.when;
		whenStr = convertDateToString(when);

		postInitActions();
	}

	protected void initExtraDbActions(final long id) { }

	protected void postInitActions() { }

	@Override
	public void resetId() {
		id = 0;
	}

	public void refreshFromDataBase() {
		if (id == 0)
			throw new IllegalArgumentException("Cannot refresh bean not yet commited to database");

		setId(id);
	}

	@Override
	public boolean equals(final Object object) {
		if (id == 0)
			return false;

		if (object instanceof OnSpecificDate)
			return ((OnSpecificDate) object).getId() == id;

		return false;
	}

	@Override
	public int hashCode() {
		if (id == 0)
			return -1;

		return 31 * ((int) (id ^ (id >>> 32))) + 17;
	}

	@Override
	public String toString() {
		final ToStringMaker stringMaker = new ToStringMaker(this);
		stringMaker.addField("idRegistryEntry", idRegistryEntry);
		stringMaker.addField("when", when);
		stringMaker.addField("whenStr", whenStr);
		return stringMaker.toString();
	}

	public void setIdRegistryEntry(final long idRegistryEntry) {
		this.idRegistryEntry = idRegistryEntry;
	}

	public void setRegistryEntry(final RegistryEntry registryEntry) {
		if (registryEntry.getId() == 0)
			throw new IllegalArgumentException("Cannot accept uninitialized RegistryEntry bean (id = 0) as argument.");

		idRegistryEntry = registryEntry.getId();
	}

	public void setWhen(final Date when) {
		if (when == null)
			this.when = null;
		else
			this.when = new Date(when.getTime());
		whenStr = convertDateToString(when);
	}

	public void setWhenStr(final String whenStr) {
		this.whenStr = whenStr;
	}

	@Override
	public long getId() {
		return id;
	}

	public long getIdRegistryEntry() {
		return idRegistryEntry;
	}

	public RegistryEntry getRegistryEntry() {
		return new RegistryEntry(idRegistryEntry);
	}

	public Date getWhen() {
		if (when == null)
			return null;

		return new Date(when.getTime());
	}

	public String getWhenStr() {
		return whenStr;
	}

	public String getWhenFormatted() {
		if (isWhenEmpty()) {
			if (isWhenRequired())
				throw new IllegalArgumentException("Cannot display bad data");
			return "";
		}

		if (!isWhenOK())
			throw new IllegalArgumentException("Cannot display bad data");

		return formatDate(convertStringToDate(whenStr));
	}

	public String getIdRegistryEntryLabel() {
		return onSpecificDateInternals.getLabel("idRegistryEntry");
	}

	public String getWhenLabel() {
		return onSpecificDateInternals.getLabel("when");
	}

	public boolean isIdRequired() {
		return true;
	}

	public boolean isIdRegistryEntryRequired() {
		return true;
	}

	public boolean isWhenRequired() {
		return true;
	}

	public boolean isIdToBeUnique() {
		return true;
	}

	public boolean isIdRegistryEntryToBeUnique() {
		return true;
	}

	public boolean isWhenToBeUnique() {
		return false;
	}

	@Override
	public void updateDB() {
		preUpdateConversions();

		if (id == 0) {
			createRecord();
			return;
		}

		if (id > 0) {
			updateRecord();
			return;
		}

		assert (false) : "id < 0 ?!?";
	}

	public long updateDB(final DBTransaction transaction) {
		if (ON_SPECIFIC_DATE_PARAMETERS.USE_CACHE)
			throw new UnsupportedOperationException("Cannot cache intermediate updates.");

		preUpdateConversions(transaction);

		if (id == 0) {
			id = createRecord(transaction);
			return id;
		}

		if (id > 0) {
			updateRecord(transaction);
			return id;
		}

		assert (false) : "id < 0 ?!?";
		return -1;
	}

	@Override
	public void preUpdateConversions() {
		preUpdateConversions(null);
	}

	protected void preUpdateConversions(final DBTransaction transaction) {
		if (!isDataOK(transaction))
			throw new IllegalArgumentException(ErrorMessage.toStrings(getErrorMessages()));

		if (!Strings.isEmpty(whenStr))
			when = convertStringToDate(whenStr);
		else
			when = null;
	}

	@Override
	public boolean isDataOK() {
		return isDataOK(null);
	}

	protected boolean isDataOK(final DBTransaction transaction) {
		onSpecificDateInternals.clearErrorMessages();
		boolean ok = true;

		ok = checkDataForIdRegistryEntry(transaction) && ok;
		ok = checkDataForWhen() && ok;

		return ok;
	}

	protected boolean checkDataForIdRegistryEntry() {
		return checkDataForIdRegistryEntry(null);
	}

	protected boolean checkDataForIdRegistryEntry(final DBTransaction transaction) {
		if (isIdRegistryEntryEmpty()) {
			if (isIdRegistryEntryRequired()) {
				onSpecificDateInternals.addErrorMessage(id, "idRegistryEntry", getIdRegistryEntryLabel(), getIdRegistryEntryEmptyErrorMessage());
				return false;
			}
		} else if (!isIdRegistryEntryOK(transaction)) {
			onSpecificDateInternals.addErrorMessage(id, "idRegistryEntry", getIdRegistryEntryLabel(), getIdRegistryEntryBadFormatErrorMessage());
			return false;
		} else if (isIdRegistryEntryToBeUnique() && !isIdRegistryEntryUnique()) {
			onSpecificDateInternals.addErrorMessage(id, "idRegistryEntry", getIdRegistryEntryLabel(), getIdRegistryEntryNotUniqueErrorMessage());
			return false;
		}

		return true;
	}

	protected boolean checkDataForWhen() {
		if (isWhenEmpty()) {
			if (isWhenRequired()) {
				onSpecificDateInternals.addErrorMessage(id, "when", getWhenLabel(), getWhenEmptyErrorMessage());
				return false;
			}
		} else if (!isWhenOK()) {
			onSpecificDateInternals.addErrorMessage(id, "when", getWhenLabel(), getWhenBadFormatErrorMessage());
			return false;
		} else if (isWhenToBeUnique() && !isWhenUnique()) {
			onSpecificDateInternals.addErrorMessage(id, "when", getWhenLabel(), getWhenNotUniqueErrorMessage());
			return false;
		}

		return true;
	}

	public boolean isIdRegistryEntryEmpty() {
		return idRegistryEntry == 0;
	}

	public boolean isWhenEmpty() {
		return Strings.isEmpty(whenStr);
	}

	public String getIdRegistryEntryEmptyErrorMessage() {
		return onSpecificDateInternals.getRequiredErrorMessage("idRegistryEntry");
	}

	public String getWhenEmptyErrorMessage() {
		return onSpecificDateInternals.getRequiredErrorMessage("when");
	}

	public boolean isIdRegistryEntryOK() {
		return isIdRegistryEntryOK(null);
	}

	protected boolean isIdRegistryEntryOK(final DBTransaction transaction) {
		if (transaction == null)
			return RegistryEntry.isIdOK(idRegistryEntry);

		return RegistryEntry.isIdOK(idRegistryEntry, transaction);
	}

	public boolean isWhenOK() {
		return validateDateFormat(whenStr);
	}

	public String getIdRegistryEntryBadFormatErrorMessage() {
		return onSpecificDateInternals.getBadFormatErrorMessage("idRegistryEntry");
	}

	public String getWhenBadFormatErrorMessage() {
		return onSpecificDateInternals.getBadFormatErrorMessage("when");
	}

	public boolean isIdRegistryEntryUnique() {
		return !dbAccess.processQuery("SELECT id FROM schdlr_on_specific_date WHERE id_registry_entry=? AND id <> ?", new BooleanCheckQuery() {
			@Override
			public void setupPreparedStatement(final PreparedStatement stat) throws SQLException {
				stat.setLong(1, idRegistryEntry);
				stat.setLong(2, id);
			}
		});
	}

	public boolean isWhenUnique() {
		return !dbAccess.processQuery("SELECT id FROM schdlr_on_specific_date WHERE when=? AND id <> ?", new BooleanCheckQuery() {
			@Override
			public void setupPreparedStatement(final PreparedStatement stat) throws SQLException {
				stat.setDate(1, when);
				stat.setLong(2, id);
			}
		});
	}

	public String getIdRegistryEntryNotUniqueErrorMessage() {
		return onSpecificDateInternals.getNotUniqueErrorMessage("idRegistryEntry");
	}

	public String getWhenNotUniqueErrorMessage() {
		return onSpecificDateInternals.getNotUniqueErrorMessage("when");
	}

	@Override
	public List<ErrorMessage> getErrorMessages() {
		return onSpecificDateInternals.getErrorMessages();
	}

	@Override
	public void reset() {
		idRegistryEntry = 0;
		when = null;
		whenStr = "";
		onSpecificDateInternals.clearErrorMessages();
	}

	@Override
	public void fullReset() {
		reset();
		id = 0;
	}

	@Override
	public void delete() {
		final DBTransaction transaction = createDBTransaction();
		delete(transaction);
		transaction.commit();

		postDeleteActions();

		if (ON_SPECIFIC_DATE_PARAMETERS.USE_CACHE)
			ON_SPECIFIC_DATE_PARAMETERS.CACHE_SET.delete(id);

		fullReset();
	}

	public void delete(final DBTransaction transaction) {
		preDeleteExtraDbActions(transaction);
		transaction.addUpdate("DELETE FROM schdlr_on_specific_date WHERE id=?", new DBQuerySetup() {
				@Override
				public void setupPreparedStatement(final PreparedStatement stat) throws SQLException {
					stat.setLong(1, id);
				}
			});
		deleteExtraDbActions(transaction);
	}

	protected void preDeleteExtraDbActions(final DBTransaction transaction) { }

	protected void deleteExtraDbActions(final DBTransaction transaction) { }

	protected void postDeleteActions() { }

	private class RecordCreationSetup implements DBQuerySetup {
		@Override
		public void setupPreparedStatement(final PreparedStatement stat) throws SQLException {
			stat.setLong(1, idRegistryEntry);
			stat.setDate(2, when);
		}
	}

	private class RecordUpdateSetup extends RecordCreationSetup {
		@Override
		public void setupPreparedStatement(final PreparedStatement stat) throws SQLException {
			super.setupPreparedStatement(stat);
			stat.setLong(3, id);
		}
	}

	private void createRecord() {
		final DBTransaction transaction = createDBTransaction();
		id = createRecord(transaction);
		transaction.commit();
		postCreateActions();
		updateCaching();
	}

	private long createRecord(final DBTransaction transaction) {
		preCreateExtraDbActions(transaction);
		final long id = transaction.addRecordCreation("INSERT INTO schdlr_on_specific_date (id_registry_entry, when) VALUES (?, ?)", new RecordCreationSetup());
		createExtraDbActions(transaction, id);
		return id;
	}

	protected void preCreateExtraDbActions(final DBTransaction transaction) { }

	protected void createExtraDbActions(final DBTransaction transaction, final long id) { }

	protected void postCreateActions() { }

	private void updateRecord() {
		final DBTransaction transaction = createDBTransaction();
		updateRecord(transaction);
		transaction.commit();
		postUpdateActions();
		updateCaching();
	}

	private void updateRecord(final DBTransaction transaction) {
		preUpdateExtraDbActions(transaction);
		transaction.addUpdate("UPDATE schdlr_on_specific_date SET id_registry_entry=?, when=? WHERE id=?", new RecordUpdateSetup());
		updateExtraDbActions(transaction);
	}

	protected void preUpdateExtraDbActions(final DBTransaction transaction) { }

	protected void updateExtraDbActions(final DBTransaction transaction) { }

	protected void postUpdateActions() { }

	private void updateCaching() {
		if (ON_SPECIFIC_DATE_PARAMETERS.USE_CACHE)
			ON_SPECIFIC_DATE_PARAMETERS.CACHE_SET.submit((OnSpecificDate) this);
	}

	protected String formatDate(final Date date) {
		return DateFormat.getDateInstance(DateFormat.LONG, onSpecificDateInternals.getLocale()).format(date);
	}

	protected Date convertStringToDate(final String str) {
		return Dates.getDateFromYYMD(str, "-");
	}

	protected String convertDateToString(final Date date) {
		if (date == null)
			return "";

		return date.toString();
	}

	protected boolean validateDateFormat(final String str) {
		final SimpleInputDateFormat simpleInputDateFormat = new SimpleInputDateFormat(SimpleInputDateFormat.ElementOrder.YYMD, "-");
		return simpleInputDateFormat.validate(str);
	}

	public static List<OnSpecificDate> getAll() {
		return getAll(ON_SPECIFIC_DATE_PARAMETERS.getOrderByFields());
	}

	protected static List<OnSpecificDate> getAll(final String orderBy) {
		return getSelection(null, orderBy, null);
	}

	private static class GetSelectionQueryProcess implements DBQueryRetrieveData<List<OnSpecificDate>> {
		@Override
		public List<OnSpecificDate> processResultSet(final ResultSet rs) throws SQLException {
			final List<OnSpecificDate> list = new ArrayList<OnSpecificDate>();

			while (rs.next())
				list.add(new OnSpecificDate(rs.getLong(1), rs.getLong(2), rs.getDate(3)));


			return list;
		}
	}

	protected static List<OnSpecificDate> getSelection(final String whereClause) {
		return getSelection(whereClause, null);
	}

	protected static List<OnSpecificDate> getSelection(final String whereClause, final DBQuerySetup setup) {
		return getSelection(whereClause, ON_SPECIFIC_DATE_PARAMETERS.getOrderByFields(), setup);
	}

	protected static List<OnSpecificDate> getSelection(final String whereClause, final String orderBy, final DBQuerySetup setup) {
		if (whereClause == null && setup != null)
			throw new IllegalArgumentException("Cannot accept setup code without a WHERE clause.");

		final StringBuilder query = new StringBuilder();
		query.append("SELECT id, id_registry_entry, when FROM schdlr_on_specific_date");
		if (whereClause != null)
			query.append(" WHERE ").append(whereClause);
		if (orderBy != null)
			query.append(" ORDER BY ").append(orderBy);

		if (whereClause == null || setup == null)
			return dbAccess.processQuery(query.toString(), new GetSelectionQueryProcess());

		return dbAccess.processQuery(query.toString(), setup, new GetSelectionQueryProcess());
	}

	private static class GetSelectionCountQueryProcess implements DBQueryRetrieveData<Long> {
		@Override
		public Long processResultSet(final ResultSet rs) throws SQLException {
			rs.next();
			return rs.getLong(1);
		}
	}

	protected static long getSelectionCount(final String whereClause) {
		return getSelectionCount(whereClause, null);
	}

	protected static long getSelectionCount(final String whereClause, final DBQuerySetup setup) {
		final String query = "SELECT COUNT(id) FROM schdlr_on_specific_date WHERE " + whereClause;

		if (setup == null)
			return dbAccess.processQuery(query, new GetSelectionCountQueryProcess());

		return dbAccess.processQuery(query, setup, new GetSelectionCountQueryProcess());
	}

	public static List<IdNamePair> getIdNamePairs(final List<String> dataFields, final List<String> orderingFields) {
		return getIdNamePairs(null, dataFields, orderingFields);
	}

	protected static List<IdNamePair> getIdNamePairs(final String whereClause, final List<String> dataFields, final List<String> orderingFields) {
		return DBQueries.getIdNamePairs(db, "schdlr_on_specific_date", whereClause, dataFields, orderingFields);
	}

	public static long getCount() {
		return DBQueries.getLongCount(db, "schdlr_on_specific_date");
	}

	public static boolean isIdOK(final long id) {
		return DBQueries.isIdOK(db, "schdlr_on_specific_date", id);
	}

	public static boolean isIdOK(final long id, final DBTransaction transaction) {
		return DBQueries.isIdOK(transaction, "schdlr_on_specific_date", id);
	}

	public static String getHumanReadableTitle(final long id) {
		if (id == 0)
			return "";

		return DBQueries.getHumanReadableTitle(db, "schdlr_on_specific_date", id, ON_SPECIFIC_DATE_PARAMETERS.getNamingFields());
	}

	public static List<OnSpecificDate> getList(final ResultSet rs) throws SQLException {
		final List<OnSpecificDate> list = new ArrayList<OnSpecificDate>();

		while (rs.next())
			list.add(new OnSpecificDate(rs));


		return list;
	}

	@Override
	public void setLocale(final Locale locale) {
		onSpecificDateInternals.setLocale(locale);
	}

}

