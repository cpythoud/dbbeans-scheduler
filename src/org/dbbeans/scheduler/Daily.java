// Generated by BeanMaker, on March 31, 2018 4:07:41 AM CEST
// Library Version #0.9.12-beta

package org.dbbeans.scheduler;

import org.dbbeans.sql.DBTransaction;
import org.dbbeans.util.Dates;

import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.logging.Level;

public class Daily extends DailyBase {
	public Daily() { }

	public Daily(final long id) {
		super(id);
	}

	public Daily(final Daily dailyModel) {
		super(dailyModel);
	}

	protected Daily(final long id, final long idRegistryEntry, final boolean businessDaysOnly, final int everyXDays, final Date start, final long idEnding) {
		super(id, idRegistryEntry, businessDaysOnly, everyXDays, start, idEnding);
	}

	protected Daily(final ResultSet rs) throws SQLException {
		super(rs);
	}

	private boolean hasEnding() {
		return !isIdEndingEmpty();
	}

	@Override
	protected void preDeleteExtraDbActions(DBTransaction transaction) {
		if (hasEnding())
			getEnding().delete(transaction);
	}

	public boolean executeAssociatedActions(Scheduler scheduler) {
		if (hasEnding() && getEnding().hasEnded()) {
			logNoRun(scheduler, "past execution end date");
			return false;
		}

		if (!hasStarted()) {
			logNoRun(scheduler, "prior to execution start date");
			return false;
		}

		if (isBusinessDaysOnly() && !todayIsBusinessDay()) {
			logNoRun(scheduler, "not a business day");
			return false;
		}

		if (!shouldBeRunToday()) {
			logNoRun(scheduler, "only executed every " + getEveryXDays() + " day");
			return false;
		}

		final RegistryEntry registryEntry = getRegistryEntry();
		if (!registryEntry.isActive()) {
			logNoRun(scheduler, "registry entry marked as inactive");
			return false;
		}
		registryEntry.execute(scheduler);

		return true;
	}

	private boolean hasStarted() {
		return Dates.compare(Dates.getCurrentDate(), getStart()) >= 0;
	}

	// TODO: code check and probably move it to utility class
	// TODO: create interface BusinessDays to be implemented by business day calculators = parameter to the scheduler
	private boolean todayIsBusinessDay() {
		return true;
	}

	// TODO: code checks for tasks that should only be executed every X day
	private boolean shouldBeRunToday() {
		return true;
	}

	private void logNoRun(Scheduler scheduler, String message) {
		scheduler.log(Level.FINER, message);
	}
}

